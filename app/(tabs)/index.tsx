import React, { useState } from "react";

import dayjs from "dayjs";
import "dayjs/locale/ko";
import { LinearGradient } from "expo-linear-gradient";
import { useRouter } from "expo-router";
import {
  FlatList,
  ScrollView,
  TextInput,
  TouchableOpacity,
  View,
} from "react-native";

import { ThemedText } from "@/components/ThemedText";
import { ThemedView } from "@/components/ThemedView";

// dayjs ÌïúÍµ≠Ïñ¥ Î°úÏºÄÏùº ÏÑ§Ï†ï
dayjs.locale("ko");

interface DummyItem {
  id: string;
  title: string;
  subtitle: string;
}

const customContentData: DummyItem[] = [
  { id: "1", title: "Î≤öÍΩÉ Ï∂ïÏ†ú 2024", subtitle: "ÏÑúÏö∏ Ïó¨ÏùòÎèÑ" },
  { id: "2", title: "ÏùåÏãù ÌéòÏä§Ìã∞Î≤å", subtitle: "Î∂ÄÏÇ∞ Ìï¥Ïö¥ÎåÄ" },
  { id: "3", title: "Ïû¨Ï¶à ÏΩòÏÑúÌä∏", subtitle: "ÎåÄÍµ¨ ÏàòÏÑ±Íµ¨" },
  { id: "4", title: "ÏïÑÌä∏ ÎßàÏºì", subtitle: "Í¥ëÏ£º ÎèôÍµ¨" },
  { id: "5", title: "Î¨∏Ìôî Ï∂ïÏ†ú", subtitle: "Ïù∏Ï≤ú Ï§ëÍµ¨" },
  { id: "6", title: "ÏïºÍ∞Ñ ÎßàÏºì", subtitle: "ÎåÄÏ†Ñ Ïú†ÏÑ±Íµ¨" },
];

const mdPickData: DummyItem[] = [
  { id: "1", title: "HOT Í∞ÄÏùÑ Ï∂ïÏ†ú", subtitle: "Ï†ÑÍµ≠ Ïù∏Í∏∞ Ï∂ïÏ†ú" },
  { id: "2", title: "ÎßõÏßë Ìà¨Ïñ¥", subtitle: "ÎØ∏ÏãùÍ∞Ä Ï∂îÏ≤ú" },
  { id: "3", title: "ÏïºÍ≤Ω Î™ÖÏÜå", subtitle: "Î°úÎß®Ìã± Ïä§Ìåü" },
  { id: "4", title: "Ï≤¥Ìóò ÌôúÎèô", subtitle: "Í∞ÄÏ°± Ïó¨Ìñâ" },
  { id: "5", title: "ÌûêÎßÅ Ïó¨Ìñâ", subtitle: "Ìú¥ÏñëÏßÄ Ï∂îÏ≤ú" },
  { id: "6", title: "Î¨∏Ìôî Ï≤¥Ìóò", subtitle: "Ïó≠ÏÇ¨ ÌÉêÎ∞©" },
];

const festivalData: DummyItem[] = [
  { id: "1", title: "ÏÑúÏö∏ Î∂àÍΩÉÏ∂ïÏ†ú", subtitle: "ÌïúÍ∞ï Ïó¨ÏùòÎèÑ" },
  { id: "2", title: "Î∂ÄÏÇ∞ Î∞îÎã§Ï∂ïÏ†ú", subtitle: "Ìï¥Ïö¥ÎåÄ Ìï¥Î≥Ä" },
  { id: "3", title: "Ï†úÏ£º Ïú†Ï±ÑÍΩÉÏ∂ïÏ†ú", subtitle: "Ï†úÏ£º ÏÑúÍ∑ÄÌè¨" },
  { id: "4", title: "Í≤ΩÏ£º Î≤öÍΩÉÏ∂ïÏ†ú", subtitle: "Í≤ΩÏ£º Î≥¥Î¨∏Îã®ÏßÄ" },
  { id: "5", title: "Í∞ïÎ¶â Ïª§ÌîºÏ∂ïÏ†ú", subtitle: "Í∞ïÎ¶â ÏïàÎ™©Ìï¥Î≥Ä" },
  { id: "6", title: "Ï†ÑÏ£º ÌïúÏò•Ï∂ïÏ†ú", subtitle: "Ï†ÑÏ£º ÌïúÏò•ÎßàÏùÑ" },
];

const weeklyContentData: { [key: string]: DummyItem[] } = {
  "0": [
    { id: "sun1", title: "ÏùºÏöîÏùº Î∏åÎü∞Ïπò ÎßàÏºì", subtitle: "ÏÑúÏö∏ ÏÑ±ÏàòÎèô" },
    { id: "sun2", title: "Í∞ÄÏ°± ÎÇòÎì§Ïù¥ Ï∂ïÏ†ú", subtitle: "Í≤ΩÍ∏∞ Ïö©Ïù∏" },
  ],
  "1": [
    { id: "mon1", title: "ÏõîÏöîÏùº Ïû¨Ï¶à ÌÅ¥ÎüΩ", subtitle: "ÏÑúÏö∏ ÌôçÎåÄ" },
    { id: "mon2", title: "ÎèÑÏã¨ ÏÜç ÌûêÎßÅ", subtitle: "ÏÑúÏö∏ ÌïúÍ∞ïÍ≥µÏõê" },
  ],
  "2": [
    { id: "tue1", title: "ÌôîÏöîÏùº ÏïÑÌä∏ÎßàÏºì", subtitle: "ÏÑúÏö∏ Ïù¥ÌÉúÏõê" },
    { id: "tue2", title: "Ï†ÑÌÜµ Í≥µÏòà Ï≤¥Ìóò", subtitle: "Ïù∏ÏÇ¨Îèô" },
  ],
  "3": [
    { id: "wed1", title: "ÏàòÏöîÏùº ÏïºÏãúÏû•", subtitle: "Î∂ÄÏÇ∞ Í¥ëÏïàÎ¶¨" },
    { id: "wed2", title: "Ï§ëÍ∞Ñ ÏâºÌëú ÏΩòÏÑúÌä∏", subtitle: "ÎåÄÍµ¨ Ï§ëÍµ¨" },
  ],
  "4": [
    { id: "thu1", title: "Î™©ÏöîÏùº Îß•Ï£ºÏ∂ïÏ†ú", subtitle: "Í∞ïÎÇ® Í∞ÄÎ°úÏàòÍ∏∏" },
    { id: "thu2", title: "ÏßÅÏû•Ïù∏ Î¨∏ÌôîÎ™®ÏûÑ", subtitle: "ÏÑúÏö∏ Î™ÖÎèô" },
  ],
  "5": [
    { id: "fri1", title: "Î∂àÍ∏à ÌååÌã∞", subtitle: "ÏÑúÏö∏ ÌÅ¥ÎüΩ Í±∞Î¶¨" },
    { id: "fri2", title: "Í∏àÏöî ÏïºÍ≤ΩÌà¨Ïñ¥", subtitle: "ÏÑúÏö∏ ÎÇ®ÏÇ∞ÌÉÄÏõå" },
  ],
  "6": [
    { id: "sat1", title: "ÌÜ†ÏöîÏùº Î≤ºÎ£©ÏãúÏû•", subtitle: "ÏÑúÏö∏ ÌôçÎåÄ" },
    { id: "sat2", title: "Ï£ºÎßê Ï∫†ÌïëÏ∂ïÏ†ú", subtitle: "Í∞ïÏõê Ï∂òÏ≤ú" },
  ],
};

const skeletonData = Array.from({ length: 8 }, (_, i) => ({
  id: i.toString(),
}));

const categoryData = Array.from({ length: 4 }, (_, i) => ({
  id: i.toString(),
}));

const Card = ({ item }: { item: DummyItem }) => {
  const router = useRouter();

  const handlePress = () => {
    router.push(`/detail/${item.id}`);
  };

  return (
    <TouchableOpacity className="mr-4" onPress={handlePress}>
      <View className="mb-2 h-32 w-40 rounded-lg bg-gray-400" />
      <ThemedText
        className="mb-1 w-36 font-medium text-black"
        numberOfLines={1}
      >
        {item.title}
      </ThemedText>
      <ThemedText className="w-32 text-sm text-gray-600" numberOfLines={1}>
        {item.subtitle}
      </ThemedText>
    </TouchableOpacity>
  );
};

const SCROLL_THRESHOLD = 50;

const getWeekDays = () => {
  const today = dayjs();
  const startOfWeek = today.startOf("week");

  return Array.from({ length: 7 }, (_, i) => {
    const day = startOfWeek.add(i, "day");
    return {
      date: day.format("D"),
      dayName: day.format("ddd"),
      dayOfWeek: i,
      fullDate: day.format("YYYY-MM-DD"),
      isToday: day.isSame(today, "day"),
    };
  });
};

const DayButton = ({
  day,
  isSelected,
  onPress,
}: {
  day: { date: string; dayName: string; dayOfWeek: number; isToday: boolean };
  isSelected: boolean;
  onPress: () => void;
}) => (
  <TouchableOpacity
    onPress={onPress}
    className={`mx-1 flex h-16 w-12 items-center justify-center rounded-2xl ${
      isSelected ? "border-0" : "border border-gray-300 bg-white"
    }`}
    style={{
      backgroundColor: isSelected ? "#816BFF" : "white",
    }}
  >
    <ThemedText
      className={`text-lg font-semibold ${
        isSelected ? "text-white" : "text-gray-400"
      }`}
    >
      {day.date}
    </ThemedText>
    <ThemedText
      className={`text-xs ${isSelected ? "text-white" : "text-gray-400"}`}
    >
      {day.dayName}
    </ThemedText>
  </TouchableOpacity>
);

export default function HomeScreen() {
  const [isScrolled, setIsScrolled] = useState(false);
  const [selectedDay, setSelectedDay] = useState<number>(dayjs().day());

  const weekDays = getWeekDays();
  const selectedDayContent = weeklyContentData[selectedDay.toString()] || [];

  const handleScroll = (event: any) => {
    const scrollY = event.nativeEvent.contentOffset.y;
    setIsScrolled(scrollY > SCROLL_THRESHOLD);
  };

  return (
    <View className="flex-1 bg-white">
      {isScrolled && (
        <View
          className="absolute left-0 right-0 top-0 z-10 bg-white px-4 pb-2 pt-24"
          style={{
            shadowColor: "#000",
            shadowOffset: { width: 0, height: 2 },
            shadowOpacity: 0.1,
            shadowRadius: 4,
            elevation: 5,
          }}
        >
          <TextInput
            className="h-11 rounded-full bg-gray-100 px-4 py-3"
            placeholder="6ÏõîÏóê ÏïàÍ∞ÄÎ©¥ ÏÜêÌï¥! Í≥†ÏÑ± Î≥µÎ∂ÑÏûê ÏàòÌôïÏ∂ïÏ†ú"
            placeholderTextColor="#9CA3AF"
          />
        </View>
      )}

      <ScrollView
        className="flex-1"
        onScroll={handleScroll}
        scrollEventThrottle={16}
      >
        <LinearGradient
          colors={["#816BFF", "#705EDB"]}
          start={{ x: 0, y: 0 }}
          end={{ x: 1, y: 0.1 }}
          locations={[0.0683, 0.9503]}
        >
          <View className="pb-6 pt-20">
            <View className="mb-1 items-center">
              <View className="rounded bg-white px-4 py-2">
                <ThemedText className="font-medium text-black">Î°úÍ≥†</ThemedText>
              </View>
            </View>

            <TextInput
              className="mx-4 my-3 h-11 rounded-full bg-white px-4 py-3"
              placeholder="Í≤ÄÏÉâÏ∞Ω"
              placeholderTextColor="#9CA3AF"
            />
          </View>
        </LinearGradient>

        <ThemedView className="-mt-6 flex-1 rounded-t-3xl px-4 pb-10 pt-6">
          <View className="mb-6">
            <View className="flex-row items-center justify-center gap-6">
              {categoryData.map((item) => (
                <View
                  key={item.id}
                  className="mr-2 h-16 w-16 rounded-2xl bg-gray-300"
                />
              ))}
            </View>
          </View>

          <View className="flex-1 gap-y-8">
            <ThemedView>
              <View className="mb-3 flex-row items-center justify-between">
                <ThemedText type="subtitle" className="font-bold text-black">
                  ÎßûÏ∂§ Ïª®ÌÖêÏ∏†
                </ThemedText>
              </View>

              <View className="mb-3">
                <FlatList
                  data={skeletonData}
                  horizontal
                  showsHorizontalScrollIndicator={false}
                  renderItem={() => (
                    <View className="mr-2 h-8 w-16 rounded-full bg-gray-300" />
                  )}
                  keyExtractor={(item) => item.id}
                />
              </View>

              <FlatList
                data={customContentData}
                horizontal
                showsHorizontalScrollIndicator={false}
                renderItem={({ item }) => <Card item={item} />}
                keyExtractor={(item) => item.id}
              />
            </ThemedView>

            <ThemedView>
              <View className="mb-3 flex-row items-center justify-between">
                <View className="flex-row items-center">
                  <ThemedText type="subtitle" className="font-bold text-black">
                    MDÌîΩ Ï∂îÏ≤ú Ïª®ÌÖêÏ∏†
                  </ThemedText>
                  <ThemedText className="ml-1 text-orange-500">üî•</ThemedText>
                </View>
                <TouchableOpacity>
                  <ThemedText className="text-sm text-gray-500">
                    ÎçîÎ≥¥Í∏∞
                  </ThemedText>
                </TouchableOpacity>
              </View>

              <FlatList
                data={mdPickData}
                horizontal
                showsHorizontalScrollIndicator={false}
                renderItem={({ item }) => <Card item={item} />}
                keyExtractor={(item) => item.id}
              />
            </ThemedView>

            <ThemedView>
              <View className="mb-3 flex-row items-center justify-between">
                <ThemedText type="subtitle" className="font-bold text-black">
                  Í∏àÏ£º Ïª®ÌÖêÏ∏†Î•º ÌïúÎààÏóê
                </ThemedText>
                <TouchableOpacity>
                  <ThemedText className="text-sm text-gray-500">
                    ÎçîÎ≥¥Í∏∞
                  </ThemedText>
                </TouchableOpacity>
              </View>

              <View className="mb-4">
                <FlatList
                  data={weekDays}
                  horizontal
                  showsHorizontalScrollIndicator={false}
                  contentContainerStyle={{ paddingHorizontal: 4 }}
                  renderItem={({ item }) => (
                    <DayButton
                      day={item}
                      isSelected={selectedDay === item.dayOfWeek}
                      onPress={() => setSelectedDay(item.dayOfWeek)}
                    />
                  )}
                  keyExtractor={(item) => item.dayOfWeek.toString()}
                />
              </View>

              <FlatList
                data={selectedDayContent}
                horizontal
                showsHorizontalScrollIndicator={false}
                renderItem={({ item }) => <Card item={item} />}
                keyExtractor={(item) => item.id}
              />
            </ThemedView>

            <ThemedView>
              <View className="mb-3 flex-row items-center justify-between">
                <ThemedText type="subtitle" className="font-bold text-black">
                  Ïù¥Îü∞ Ï∂ïÏ†ú Ïñ¥ÎïåÏöî?
                </ThemedText>
                <TouchableOpacity>
                  <ThemedText className="text-sm text-gray-500">
                    ÎçîÎ≥¥Í∏∞
                  </ThemedText>
                </TouchableOpacity>
              </View>

              <FlatList
                data={festivalData}
                horizontal
                showsHorizontalScrollIndicator={false}
                renderItem={({ item }) => <Card item={item} />}
                keyExtractor={(item) => item.id}
              />
            </ThemedView>
          </View>
        </ThemedView>
      </ScrollView>
    </View>
  );
}
